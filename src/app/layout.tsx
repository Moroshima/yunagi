import type { Metadata } from "next";
import Link from "next/link";
// import { useEffect, useState } from "react";
import { ChevronUpIcon, ThreeBarsIcon, XIcon } from "@primer/octicons-react";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

const linkGroup = [
  { url: "/", sc_name: "首页", en_name: "Home" },
  { url: "/posts", sc_name: "文章", en_name: "Article" },
  { url: "/archive", sc_name: "归档", en_name: "Archive" },
  { url: "/category", sc_name: "分类", en_name: "Category" },
  { url: "/links", sc_name: "友链", en_name: "Links" },
  { url: "/about", sc_name: "关于", en_name: "About" },
  { url: "/rss.xml", sc_name: "订阅", en_name: "Feed" },
];

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // const [scrollToTopHidden, setScrollToTopHidden] = useState(true);
  // const [headerExpand, setHeaderExpand] = useState(false);
  // useEffect(() => {
  //   setScrollToTopHidden(window.scrollY > 0 ? false : true);
  //   const handleScroll: any = () => {
  //     if (window.scrollY > 64) {
  //       setScrollToTopHidden(false);
  //     } else setScrollToTopHidden(true);
  //   };
  //   window.addEventListener("scroll", handleScroll);
  //   return () => window.removeEventListener("scroll", handleScroll);
  // }, []);

  return (
    <html lang="en">
      <body className={inter.className}>
        <div>
          <div>
            <Link href="/">Moroshima&apos;s Blog</Link>
            <div>
              {linkGroup.map((value, index, array) => {
                return (
                  <Link key={`header-link-${index}`} href={value.url}>
                    {value.sc_name}
                  </Link>
                );
              })}
            </div>
            {/* <button
            className="header-expand-icon"
            onClick={() => {
              setHeaderExpand((prev) => {
                return !prev;
              });
            }}
          >
            {headerExpand ? <XIcon size={16} /> : <ThreeBarsIcon size={16} />}
          </button> */}
          </div>
          {/* {headerExpand ? (
          <div className="header-menu">
            {linkGroup.map((value, index, array) => {
              return (
                <Link
                  key={`header-menu-link-${index}`}
                  href={value.url}
                  onClick={() => {
                    setHeaderExpand((prev) => {
                      return !prev;
                    });
                  }}
                >
                  <span>{value.sc_name}</span>
                  <span>{value.en_name}</span>
                </Link>
              );
            })}
          </div>
        ) : null} */}
        </div>
        {children}
      </body>
    </html>
  );
}
